mordoch.ron
#########
Ron Mordoch

################
# DESCRIPTION #
################
This zip file contain 3 files:
README
ex3.py
check_maximum.py

ex3.py contains 9 functions:
1. input_list
2. concat_list
3. maximum
4. cyclic
5. seven_boom
6. histogram
7. prime_factors
8. cartesian
9. pairs

For functions 1 and 7 I used the 'while' loop.
For functions 2, 3, 4, 5, 6, 8 and 9 I used the 'for' loop.

check_maximum.py contains 1 function which is testing the 'maximum' function from ex3.py.
I choose the following lists for testing:
a = []  # an empty list
b = [0, 0, 0, 0]  # list containing only zeros
c = [0, 1, 0, 1]  # list containing zero and positives
d = [1, 3, 4, 2]  # list containing different positives
Those 4 cases cover every possible scenario of lists inserted to 'maximum', within the limits of the given conditions in question 3.

#########################
# THEORETICAL QUESTIONS #
#########################

1. cyclic(123 ,321): error. These parameters are not lists, and my function is defined to receive 2 lists : cyclic(lst1, lst2).
2. maximum([-3, -2, -1]) : -1. The function sets -3 as the maximum and then iterates over the items. it checks if -2>-3, which it is, and thus -2 is the maximum. then it checks if -1>-2, and it is. -1 is the last item in the list and so it is the maximum.
3. maximum([1, 10, 100, 'intro']) : error. the function will test eventually if 100 > 'intro', but the '>' operator is not defined for strings, and therefore the function will receive an error.
4. histogram(3, [1,2,3,4]): error. The function will create an empty list of length 'n'. for 0 it will return [0], then for 1 it will return [0, 1], for 2 it will return [0, 1, 2] and then it will result in an error when reaching 3 even before 4! this is because the indexes of 3 and 4 in the list are 4 and 5, and our list is defined to be of length 3. therefore it will return list index out of range ( an error I got to know very well working on this exercise... :) )
5. prime_factors(0) : the function will return an empty list. The function will not enter the while loop because no positive num * num is smaller than or equal to zero. then it will continue to check if n>1 , which is not. the function then assumes n = 1 according to the exercises instructions, and it will return an empty list, when in fact n = 0.
6. pairs([0,0,1,1,2,2], 2) : the function will returns 4 pairs of [0, 2]. this is because it works under the assumption a number does not appear more than once in the list. [1,1] will not print because of the following line in the function: 'if num1 < num2', which is there because the exercises states that we do not want duplicates. 1 = 1 and we will only get [0, 2] for the output. for each zero it will find twice the number 2, and we have 2 zeros, therefore we will receive 4 identical lists of [0,2].
